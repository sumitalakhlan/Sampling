# -*- coding: utf-8 -*-
"""sampling

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nH_bmDqCz3tX49iZe0ddkbX35njadr5F
"""

import os
import math
import pandas as pd
from sklearn.utils import resample
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Step 1: Load and balance the dataset
creditcard_data = pd.read_csv('Creditcard_data.csv')  # Replace with the correct path to your dataset

# Separate the dataset into majority and minority classes
majority = creditcard_data[creditcard_data['Class'] == 0]
minority = creditcard_data[creditcard_data['Class'] == 1]

# Upsample the minority class to match the majority class size
minority_upsampled = resample(minority,
                              replace=True,
                              n_samples=len(majority),
                              random_state=42)

# Combine the upsampled minority class with the majority class
balanced_data = pd.concat([majority, minority_upsampled])

# Shuffle the dataset
balanced_data = balanced_data.sample(frac=1, random_state=42).reset_index(drop=True)

# Save the balanced dataset to a CSV file
balanced_file_path = 'data/Balanced_Creditcard_Data.csv'  # Added a subdirectory 'data'
os.makedirs(os.path.dirname(balanced_file_path), exist_ok=True)
balanced_data.to_csv(balanced_file_path, index=False)

print(f"Balanced dataset saved to: {balanced_file_path}")
print(balanced_data['Class'].value_counts())  # Check the class distribution

# Step 2: Calculate sample size using the formula n = (z^2 * p * (1-p)) / e^2
z = 1.96  # 95% confidence level
p = 0.5  # Worst-case scenario
e = 0.05  # Margin of error

sample_size = math.ceil((z**2 * p * (1 - p)) / (e**2))
print(f"Calculated sample size: {sample_size}")

# Step 3: Create five samples of the calculated size
samples = [balanced_data.sample(n=sample_size, random_state=i) for i in range(1, 6)]

# Step 4: Define ML models
models = {
    "M1": RandomForestClassifier(random_state=42),
    "M2": SVC(random_state=42),
    "M3": LogisticRegression(random_state=42, max_iter=1000),
    "M4": DecisionTreeClassifier(random_state=42),
    "M5": KNeighborsClassifier()
}

# Step 5: Apply five different sampling techniques and evaluate
results = []
for i, sample in enumerate(samples, start=1):
    X = sample.drop(columns=["Class"])
    y = sample["Class"]

    # Train-test split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

    for model_name, model in models.items():
        # Train model
        model.fit(X_train, y_train)

        # Predict and calculate accuracy
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)

        # Append results
        results.append((f"Sampling{i}", model_name, accuracy))

# Step 6: Create a DataFrame of results
results_df = pd.DataFrame(results, columns=["Sampling Technique", "Model", "Accuracy"])

# Step 7: Determine the best sampling technique for each model
best_results = results_df.groupby("Model").apply(lambda x: x.nlargest(1, "Accuracy")).reset_index(drop=True)

# Step 8: Save results to CSV files
results_csv_path = "data/Sampling_Accuracy_Results.csv"
best_results_csv_path = "data/Best_Sampling_Technique_Per_Model.csv"

os.makedirs(os.path.dirname(results_csv_path), exist_ok=True)  # Ensure the directory exists
results_df.to_csv(results_csv_path, index=False)
best_results.to_csv(best_results_csv_path, index=False)

print("\nAccuracy results saved to:", results_csv_path)
print("Best results saved to:", best_results_csv_path)